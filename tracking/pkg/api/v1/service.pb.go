// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package sample_apps_v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//GetTrackingRequest set a tracking identifier
type GetTrackingRequest struct {
	//tracking_id is the identifier for tracking
	TrackingId           string   `protobuf:"bytes,1,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTrackingRequest) Reset()         { *m = GetTrackingRequest{} }
func (m *GetTrackingRequest) String() string { return proto.CompactTextString(m) }
func (*GetTrackingRequest) ProtoMessage()    {}
func (*GetTrackingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *GetTrackingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTrackingRequest.Unmarshal(m, b)
}
func (m *GetTrackingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTrackingRequest.Marshal(b, m, deterministic)
}
func (m *GetTrackingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTrackingRequest.Merge(m, src)
}
func (m *GetTrackingRequest) XXX_Size() int {
	return xxx_messageInfo_GetTrackingRequest.Size(m)
}
func (m *GetTrackingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTrackingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTrackingRequest proto.InternalMessageInfo

func (m *GetTrackingRequest) GetTrackingId() string {
	if m != nil {
		return m.TrackingId
	}
	return ""
}

//Tracking contains information about a shipment
type Tracking struct {
	//tracking_id is the identifier for tracking
	TrackingId string `protobuf:"bytes,1,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`
	//status provides the current status of the shipment
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	//created_time is when the tracking resource was created
	CreateTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	//signed is populated when the shipment is delivered
	Signed string `protobuf:"bytes,5,opt,name=signed,proto3" json:"signed,omitempty"`
	//updated_time is when the resource was last updated
	UpdateTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	//weight of the shipment
	Weight string `protobuf:"bytes,6,opt,name=weight,proto3" json:"weight,omitempty"`
	//est_delivery_date estimated delivery time for shipment
	EstDeliveryTime *timestamp.Timestamp `protobuf:"bytes,7,opt,name=est_delivery_time,json=estDeliveryTime,proto3" json:"est_delivery_time,omitempty"`
	//carrier of the shipmemt
	Carrier              string   `protobuf:"bytes,8,opt,name=carrier,proto3" json:"carrier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tracking) Reset()         { *m = Tracking{} }
func (m *Tracking) String() string { return proto.CompactTextString(m) }
func (*Tracking) ProtoMessage()    {}
func (*Tracking) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *Tracking) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tracking.Unmarshal(m, b)
}
func (m *Tracking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tracking.Marshal(b, m, deterministic)
}
func (m *Tracking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tracking.Merge(m, src)
}
func (m *Tracking) XXX_Size() int {
	return xxx_messageInfo_Tracking.Size(m)
}
func (m *Tracking) XXX_DiscardUnknown() {
	xxx_messageInfo_Tracking.DiscardUnknown(m)
}

var xxx_messageInfo_Tracking proto.InternalMessageInfo

func (m *Tracking) GetTrackingId() string {
	if m != nil {
		return m.TrackingId
	}
	return ""
}

func (m *Tracking) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Tracking) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Tracking) GetSigned() string {
	if m != nil {
		return m.Signed
	}
	return ""
}

func (m *Tracking) GetUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *Tracking) GetWeight() string {
	if m != nil {
		return m.Weight
	}
	return ""
}

func (m *Tracking) GetEstDeliveryTime() *timestamp.Timestamp {
	if m != nil {
		return m.EstDeliveryTime
	}
	return nil
}

func (m *Tracking) GetCarrier() string {
	if m != nil {
		return m.Carrier
	}
	return ""
}

//ListTrackingResponse contains a list of tracking information
type ListTrackingResponse struct {
	//trackings contains a repeated list of tracking information
	Trackings []*Tracking `protobuf:"bytes,1,rep,name=trackings,proto3" json:"trackings,omitempty"`
	//next_page_token is used for pagination
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTrackingResponse) Reset()         { *m = ListTrackingResponse{} }
func (m *ListTrackingResponse) String() string { return proto.CompactTextString(m) }
func (*ListTrackingResponse) ProtoMessage()    {}
func (*ListTrackingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{2}
}

func (m *ListTrackingResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTrackingResponse.Unmarshal(m, b)
}
func (m *ListTrackingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTrackingResponse.Marshal(b, m, deterministic)
}
func (m *ListTrackingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTrackingResponse.Merge(m, src)
}
func (m *ListTrackingResponse) XXX_Size() int {
	return xxx_messageInfo_ListTrackingResponse.Size(m)
}
func (m *ListTrackingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTrackingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTrackingResponse proto.InternalMessageInfo

func (m *ListTrackingResponse) GetTrackings() []*Tracking {
	if m != nil {
		return m.Trackings
	}
	return nil
}

func (m *ListTrackingResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func init() {
	proto.RegisterType((*GetTrackingRequest)(nil), "sample_apps.v1.GetTrackingRequest")
	proto.RegisterType((*Tracking)(nil), "sample_apps.v1.Tracking")
	proto.RegisterType((*ListTrackingResponse)(nil), "sample_apps.v1.ListTrackingResponse")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 484 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x96, 0x53, 0x48, 0xd3, 0x75, 0x9a, 0x8a, 0x55, 0x55, 0x59, 0xa6, 0x52, 0x23, 0xab, 0x82,
	0x70, 0xb1, 0x69, 0x10, 0x5c, 0xb8, 0x55, 0xfc, 0x08, 0x09, 0xa1, 0x28, 0xcd, 0xdd, 0xda, 0xd8,
	0x53, 0x77, 0xd5, 0x78, 0x77, 0xf1, 0x4e, 0x0c, 0x11, 0xe2, 0x02, 0x8f, 0xc0, 0x83, 0x71, 0xe0,
	0x15, 0xe0, 0x3d, 0x90, 0x77, 0xed, 0xe2, 0xa4, 0xa0, 0x5c, 0x38, 0xce, 0xdf, 0xf7, 0x33, 0x3b,
	0x4b, 0xf6, 0x35, 0x14, 0x25, 0x4f, 0x20, 0x54, 0x85, 0x44, 0x49, 0x07, 0x9a, 0xe5, 0x6a, 0x01,
	0x31, 0x53, 0x4a, 0x87, 0xe5, 0x99, 0x7f, 0x3f, 0x93, 0x32, 0x5b, 0x40, 0x64, 0xaa, 0xf3, 0xe5,
	0x65, 0x04, 0xb9, 0xc2, 0x95, 0x6d, 0xf6, 0x8f, 0xeb, 0x22, 0x53, 0x3c, 0x62, 0x42, 0x48, 0x64,
	0xc8, 0xa5, 0xd0, 0x75, 0xf5, 0x64, 0x73, 0x14, 0x79, 0x0e, 0x1a, 0x59, 0xae, 0x6c, 0x43, 0xf0,
	0x94, 0xd0, 0xd7, 0x80, 0xb3, 0x82, 0x25, 0xd7, 0x5c, 0x64, 0x53, 0x78, 0xbf, 0x04, 0x8d, 0xf4,
	0x84, 0xb8, 0x58, 0xa7, 0x62, 0x9e, 0x7a, 0xce, 0xd0, 0x19, 0xed, 0x4d, 0x49, 0x93, 0x7a, 0x93,
	0x06, 0xdf, 0x3b, 0xa4, 0xd7, 0x0c, 0x6d, 0xed, 0xa6, 0x47, 0xa4, 0xab, 0x91, 0xe1, 0x52, 0x7b,
	0x1d, 0x53, 0xab, 0x23, 0xfa, 0x9c, 0xb8, 0x49, 0x01, 0x0c, 0x21, 0xae, 0x64, 0x79, 0x3b, 0x43,
	0x67, 0xe4, 0x8e, 0xfd, 0xd0, 0x6a, 0x0e, 0x1b, 0xcd, 0xe1, 0xac, 0xd1, 0x3c, 0x25, 0xb6, 0xbd,
	0x4a, 0x18, 0x50, 0x9e, 0x09, 0x48, 0xbd, 0xbb, 0x35, 0xa8, 0x89, 0x2a, 0xd0, 0xa5, 0x4a, 0x6f,
	0x40, 0xef, 0x6c, 0x07, 0xb5, 0xed, 0x0d, 0xe8, 0x07, 0xe0, 0xd9, 0x15, 0x7a, 0x5d, 0x0b, 0x6a,
	0x23, 0xfa, 0x8a, 0xdc, 0x03, 0x8d, 0x71, 0x0a, 0x0b, 0x5e, 0x42, 0xb1, 0xb2, 0xd0, 0xbb, 0x5b,
	0xa1, 0x0f, 0x40, 0xe3, 0x8b, 0x7a, 0xc6, 0xe0, 0x7b, 0x64, 0x37, 0x61, 0x45, 0xc1, 0xa1, 0xf0,
	0x7a, 0x86, 0xa0, 0x09, 0x83, 0x92, 0x1c, 0xbe, 0xe5, 0xba, 0xf5, 0x12, 0x5a, 0x49, 0xa1, 0x81,
	0x3e, 0x23, 0x7b, 0xcd, 0x26, 0xb5, 0xe7, 0x0c, 0x77, 0x46, 0xee, 0xd8, 0x0b, 0xd7, 0x0f, 0x24,
	0xbc, 0x19, 0xfa, 0xd3, 0x4a, 0x1f, 0x90, 0x03, 0x01, 0x1f, 0x31, 0x56, 0x2c, 0x83, 0x18, 0xe5,
	0x35, 0x88, 0x7a, 0xf9, 0xfb, 0x55, 0x7a, 0xc2, 0x32, 0x98, 0x55, 0xc9, 0xf1, 0xaf, 0x0e, 0xe9,
	0x5d, 0x5c, 0x71, 0x95, 0x83, 0x40, 0x2a, 0x89, 0xdb, 0xba, 0x06, 0x1a, 0x6c, 0x12, 0xdd, 0x3e,
	0x15, 0xff, 0x9f, 0x62, 0x82, 0xe0, 0xcb, 0x8f, 0x9f, 0xdf, 0x3a, 0xc7, 0xd4, 0x8f, 0xca, 0xb3,
	0xa8, 0x11, 0x16, 0x7d, 0x6a, 0x9d, 0xca, 0x67, 0x3a, 0x27, 0xfd, 0xb6, 0x6b, 0x7a, 0x74, 0x6b,
	0x99, 0x2f, 0xab, 0x5b, 0xf7, 0x4f, 0x37, 0x59, 0xfe, 0xb6, 0xab, 0xe0, 0xd0, 0x30, 0x0e, 0x68,
	0xbf, 0xcd, 0x48, 0xbf, 0x3a, 0x64, 0xf0, 0x4e, 0x22, 0xbf, 0x5c, 0xfd, 0x27, 0x63, 0x91, 0xa1,
	0x79, 0x44, 0x1f, 0xae, 0x19, 0x13, 0x15, 0x05, 0x4f, 0xcc, 0xf7, 0x5b, 0x77, 0x39, 0x72, 0x1e,
	0x3b, 0xe7, 0xa7, 0x84, 0x26, 0x32, 0xdf, 0xc0, 0x3c, 0xef, 0x5f, 0xd8, 0x9f, 0x3f, 0xa9, 0xec,
	0x4e, 0x9c, 0x79, 0xd7, 0xf8, 0x7e, 0xf2, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x3e, 0xd2, 0x6f,
	0x12, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ShipmentClient is the client API for Shipment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ShipmentClient interface {
	//GetTracking gets a specific tracking identifier
	GetTracking(ctx context.Context, in *GetTrackingRequest, opts ...grpc.CallOption) (*Tracking, error)
	//ListTracking lists all the tracking objects
	ListTracking(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListTrackingResponse, error)
	//NotifyTracking for testing streaming
	NotifyTracking(ctx context.Context, opts ...grpc.CallOption) (Shipment_NotifyTrackingClient, error)
}

type shipmentClient struct {
	cc *grpc.ClientConn
}

func NewShipmentClient(cc *grpc.ClientConn) ShipmentClient {
	return &shipmentClient{cc}
}

func (c *shipmentClient) GetTracking(ctx context.Context, in *GetTrackingRequest, opts ...grpc.CallOption) (*Tracking, error) {
	out := new(Tracking)
	err := c.cc.Invoke(ctx, "/sample_apps.v1.Shipment/GetTracking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipmentClient) ListTracking(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListTrackingResponse, error) {
	out := new(ListTrackingResponse)
	err := c.cc.Invoke(ctx, "/sample_apps.v1.Shipment/ListTracking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipmentClient) NotifyTracking(ctx context.Context, opts ...grpc.CallOption) (Shipment_NotifyTrackingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Shipment_serviceDesc.Streams[0], "/sample_apps.v1.Shipment/NotifyTracking", opts...)
	if err != nil {
		return nil, err
	}
	x := &shipmentNotifyTrackingClient{stream}
	return x, nil
}

type Shipment_NotifyTrackingClient interface {
	Send(*GetTrackingRequest) error
	Recv() (*Tracking, error)
	grpc.ClientStream
}

type shipmentNotifyTrackingClient struct {
	grpc.ClientStream
}

func (x *shipmentNotifyTrackingClient) Send(m *GetTrackingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *shipmentNotifyTrackingClient) Recv() (*Tracking, error) {
	m := new(Tracking)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ShipmentServer is the server API for Shipment service.
type ShipmentServer interface {
	//GetTracking gets a specific tracking identifier
	GetTracking(context.Context, *GetTrackingRequest) (*Tracking, error)
	//ListTracking lists all the tracking objects
	ListTracking(context.Context, *empty.Empty) (*ListTrackingResponse, error)
	//NotifyTracking for testing streaming
	NotifyTracking(Shipment_NotifyTrackingServer) error
}

// UnimplementedShipmentServer can be embedded to have forward compatible implementations.
type UnimplementedShipmentServer struct {
}

func (*UnimplementedShipmentServer) GetTracking(ctx context.Context, req *GetTrackingRequest) (*Tracking, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTracking not implemented")
}
func (*UnimplementedShipmentServer) ListTracking(ctx context.Context, req *empty.Empty) (*ListTrackingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTracking not implemented")
}
func (*UnimplementedShipmentServer) NotifyTracking(srv Shipment_NotifyTrackingServer) error {
	return status.Errorf(codes.Unimplemented, "method NotifyTracking not implemented")
}

func RegisterShipmentServer(s *grpc.Server, srv ShipmentServer) {
	s.RegisterService(&_Shipment_serviceDesc, srv)
}

func _Shipment_GetTracking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrackingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipmentServer).GetTracking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sample_apps.v1.Shipment/GetTracking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipmentServer).GetTracking(ctx, req.(*GetTrackingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shipment_ListTracking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipmentServer).ListTracking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sample_apps.v1.Shipment/ListTracking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipmentServer).ListTracking(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shipment_NotifyTracking_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ShipmentServer).NotifyTracking(&shipmentNotifyTrackingServer{stream})
}

type Shipment_NotifyTrackingServer interface {
	Send(*Tracking) error
	Recv() (*GetTrackingRequest, error)
	grpc.ServerStream
}

type shipmentNotifyTrackingServer struct {
	grpc.ServerStream
}

func (x *shipmentNotifyTrackingServer) Send(m *Tracking) error {
	return x.ServerStream.SendMsg(m)
}

func (x *shipmentNotifyTrackingServer) Recv() (*GetTrackingRequest, error) {
	m := new(GetTrackingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Shipment_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sample_apps.v1.Shipment",
	HandlerType: (*ShipmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTracking",
			Handler:    _Shipment_GetTracking_Handler,
		},
		{
			MethodName: "ListTracking",
			Handler:    _Shipment_ListTracking_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NotifyTracking",
			Handler:       _Shipment_NotifyTracking_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
